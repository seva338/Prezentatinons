{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Библиотека Requests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Модуль Requests позволяет отправлять запросы HTTP в Python, что открывает возможность использования API в Python, т.к. при использовании API отправляются запросы HTTP и получаются ответы. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для установки библиотеки, используем команду:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "$ pip install requests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По окончании установки библиотеки, приступаем к работе с ней. Первым делом мы используем библиотеку Requests для проверки статус-кода ресурса. Отправим запрос GET и проверим, что он нам возвращает."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ">>> import requests\n",
    ">>> r = requests.get('http://learn.python.ru')\n",
    ">>> r \n",
    "<Response [200]>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы можем видеть, в качестве ответа мы получили объект класса Response и код 200. Этот код говорит, что ресурс работает и можно с ним взаимодействовать. В случаях ошибок, будут возвращены иные коды. Подробнее с кодами состояния HTTP можно ознакомиться на сайте https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Краткий обзор значений кодов состояния:\n",
    "\n",
    "1XX — информация\n",
    "2XX — успешно\n",
    "3XX — перенаправление\n",
    "4XX — ошибка клиента (ошибка на вашей стороне)\n",
    "5XX — ошибка сервера (ошибка на их стороне)\n",
    "Обычно при выполнении наших собственных запросов мы хотим получить коды состояния в диапазоне 200.\n",
    "\n",
    "Библиотека Requests понимает, что коды состояния 4XX и 5XX сигнализируют об ошибках, и поэтому при возврате этих кодов состояния объекту ответа на запрос присваивается значение False."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Скачаем изображение с сайта\n",
    "\n",
    "В этом примере мы будем применять всё тот же запрос GET, но, в отличие от предыдущего, мы будем работать с содержимым ответа."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ">>> import requests\n",
    ">>> image = requests.get('https://st2.depositphotos.com/1064024/10755/i/600/depositphotos_107559180-stock-photo-little-prince-illustration.jpg')\n",
    ">>> with open('new_image.jpg', 'wb') as f:\n",
    "...     f.write(image.content)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После выполнения данного скрипта, мы увидим новое изображение под названием new_image.png в директории, из которой у нас запущен скрипт."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Загрузим файл на сервер\n",
    "\n",
    "Для следующего примера воспользуемся сайтом для тестирования HTTP запросов Webhook.site (https://webhook.site/). В качестве URL мы будем использовать ссылку, которая генерируется на сайте автоматически. У вас она будет отличаться от использованной в примере."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ">>> import requests\n",
    ">>> url = 'https://webhook.site/c253969f-1ad8-4888-812e-e57f4eb4924e' #необходимо взять собственный url с webhook.site \n",
    ">>> with open('test.txt', 'w') as f:\n",
    "...     f.write('текст для проверки загрузки файла')\n",
    ">>> with open('test.txt', 'rb') as f:\n",
    "...     r = requests.post(url, {'files': f})\n",
    "...     print(r)\n",
    "<Response [200]>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После выполнения скрипта в терминале мы увидим уже знакомый нам объект класса Response и статус код - 200. Это означает, что запрос выполнился. Вернемся снова на сайт Webhook.site, выберем в правой колонке наш запрос и сможем посмотреть содержание выполненного запроса."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Авторизуемся на сайте\n",
    "\n",
    "В этом примере будем использовать сайт, который нам также потребуется в следующем примере. Для начала зарегистрируемся на сайте WorldWeatherOnline(https://www.worldweatheronline.com/developer). После удачной регистрации на сайте в личном кабинете вы увидите API KEY, который потребуется для следующего примера.\n",
    "\n",
    "Для авторизации на сайте нам необходимо в запросе отправить пользовательские данные на сайт. Помимо логина и пароля, мы должны отправить сайту ключи, которые содержатся в заголовках пакета. Чтобы узнать эти ключи нужно выйти из нашей учётной записи, перейти на страницу входа, затем открыть в браузере Developer tools (F12), перейти на вкладку Network и снова авторизоваться. После того как страница загрузится в Developer tools во вкладке Network пролистайте вверх и найдите строчку login.aspx.\n",
    "\n",
    "Как мы можем заметить во вкладке Headers, при входе мы осуществили запрос POST для передачи данных серверу. Пролистав вниз до блока Form Data, мы найдём все ключи, которые нам необходимо отправить сайту для авторизации."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ">>> import requests\n",
    ">>> url = 'https://www.worldweatheronline.com/developer/login.aspx'\n",
    "# >>> data = {<заносим сюда все ключи, которые необходимо отправить серверу в формате “key”: “value” и не забываем ставить запятые после каждого “value”>}\n",
    ">>> data = {\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", \"Origin\": \"https://www.worldweatheronline.com\", \"Cookie\": \".ASPXAUTH=6B144D4407FA3BE71098A95F3F586E896688B09733B705656D5B76ABB7D1736E2F671EADF749D114662295E7AAC2139B9A059A082176A6C860AC2822DD4AF2902942F2CD9BFCC2F7F72B9BA93AF93EF923B02809C70BF5BF87A500D24285DF461B40F01E8A39FBEAA14DCDC7658F53DEBFEAA4F3; _ga=GA1.2.1249758437.1615282960; _gid=GA1.2.269451775.1615282982; hblid=gQxckFXFK51DSjzi371160MoFBep55QB; olfsk=olfsk9044471948228736; wcsid=nyObvzxH7zcoSOcE371160MpQBABe55o; _oklv=1615284169779%2CnyObvzxH7zcoSOcE371160MpQBABe55o; _gat=1; _ga_N8BNVLHSHY=GS1.1.1615282959.1.1.1615283118.0; _ok=7943-680-10-1693; _okbk=cd4%3Dtrue%2Cvi5%3D0%2Cvi4%3D1615282982662%2Cvi3%3Dactive%2Cvi2%3Dfalse%2Cvi1%3Dfalse%2Ccd8%3Dchat%2Ccd6%3D0%2Ccd5%3Daway%2Ccd3%3Dfalse%2Ccd2%3D0%2Ccd1%3D0%2C; _okdetect=%7B%22token%22%3A%2216152829824210%22%2C%22proto%22%3A%22https%3A%22%2C%22host%22%3A%22www.worldweatheronline.com%22%7D; cookieconsent_dismissed=yes; ASP.NET_SessionId=sdk2mutfe54yxvpfsrgncwvf; wwoanon=N_1YnXJPL7mMbMFQBFfFvmbv9scIKEh3Fd__JQsPtJmWpT-t-VGuuJ_e27qmbhpFyXvgZAMbs2UfOphheGqwvzrxjUmN-9GfpKe9dBon6Tk9wj9JGH6HzT7aTguu5XhcPiIw6Q2\", \"Accept-Encoding\": \"gzip, deflate, br\", \"Host\": www.worldweatheronline.com\", \"\"User-Agen\"t: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.2 Safari/605.1.15\", \"Accept-Language\": \"ru\", \"Referer\": \"https://www.worldweatheronline.com/developer/login.aspx\", \"Connection\": \"keep-alive\"}\n",
    ">>> s = requests.Session()\n",
    ">>> s = requests.post(url, data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для проверки выполнения авторизации выведем содержание ответа сервера:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ">>> print(s.text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После выполнения данной функции в консоли мы увидим содержимое страницы в виде текста, то есть так, как страницу “видит” наш браузер - в формате html. Подтверждением успешной авторизации служат следующие строки:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "<li class=\"right_link\"><a href=\"/developer/my/\" class=\"bordered\">My Account</a></li>\n",
    "<li class=\"right_link\"><a href=\"/developer/logout.aspx\" class=\"bordered\">Logout</a></li>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Узнаем погоду в Москве \n",
    "\n",
    "В этом примере мы будем использовать API KEY с сайта WorldWeatherOnline, на котором мы зарегистрировались в прошлом примере. В разделе документации на сайте WorldWeatherOnline приведено подробное описание параметров.\n",
    " \n",
    "Теперь уже с использованием вашей любимой IDE напишем скрипт, который будет принимать в качестве аргумента из командной строки город, а возвращать значение температуры.\n",
    " \n",
    "Создадим файл и назовём его weather.py. Запишем в него:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import requests\n",
    "\n",
    "\n",
    "def get_weather():\n",
    "    url = 'http://api.worldweatheronline.com/premium/v1/weather.ashx'\n",
    "    city = sys.argv[1]\n",
    "    params = { 'key': '<копируем сюда ключ, полученный на сайте>',\n",
    "               'q': city,\n",
    "               'format': 'json',\n",
    "               'num_of_days': 1,\n",
    "               'lang': 'ru'}\n",
    "    r = requests.get(url, params=params)\n",
    "    the_weather = r.json()\n",
    "    # данной строкой мы преобразуем полученное содержимое страницы\n",
    "    # в формат json, который очень похож на тип данных dict() в Python\n",
    "    # и с которым очень удобно работать\n",
    "    if 'data' in the_weather:\n",
    "        if 'current_condition' in the_weather['data']:\n",
    "            try:\n",
    "                return the_weather['data']['current_condition'][0]\n",
    "            except(IndexError, TypeError):\n",
    "                return 'Server Error'\n",
    "    return 'Server Error'\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    weather = get_weather()\n",
    "    print(f'Погода сейчас {weather[\"temp_C\"]}, ощущается как {weather[\"FeelsLikeC\"]}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Запустим наш скрипт в командной строке:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "$ python weather.py Moscow "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В качестве ответа мы должны увидеть:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Погода сейчас 20, ощущается как 20 "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
